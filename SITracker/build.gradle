/*
 * Copyright 2013 Gleb Godonoga.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.regex.Pattern

buildscript {
    repositories {
        maven { url 'http://repo1.maven.org/maven2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {
    compile
    androidannotations.extendsFrom(compile)
}


ext.androidAnnotationsVersion = '3.0-SNAPSHOT';

dependencies {
    compile 'com.android.support:support-v4:18+'
    compile 'com.android.support:appcompat-v7:18+'
    androidannotations "org.androidannotations:androidannotations:${androidAnnotationsVersion}"
    compile "org.androidannotations:androidannotations-api:${androidAnnotationsVersion}"
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'com.j256.ormlite:ormlite-android:4.46'
    compile 'com.github.kevinsawicki:http-request:4.2'
    compile 'de.greenrobot:eventbus:2.0.2'
    compile('de.keyboardsurfer.android.widget:crouton:1.8.1') {
        exclude module: 'support-v4'
        compile 'com.android.support:support-v4:+'
    }
    compile files('libs/volley.jar')
    compile files("libs/libGoogleAnalyticsV2.jar")

    instrumentTestCompile 'com.squareup:fest-android:1.0.5'
}

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 18
        testPackageName 'com.andrada.sitracker.test'
        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
    }
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
        }
    }
}

afterEvaluate { project ->
    android.applicationVariants.each { variant ->
        def andAnnOutput = file("${project.buildDir}/source/aaGen/${variant.dirName}")
        variant.renderscriptCompile.resOutputDir = andAnnOutput

        variant.javaCompile.options.compilerArgs += [
                '-classpath', configurations.compile.asPath,
                '-processorpath', configurations.androidannotations.asPath,
                '-processor', 'org.androidannotations.AndroidAnnotationProcessor',
                '-AandroidManifestFile=' + variant.processResources.manifestFile,
                '-s', andAnnOutput

        ]
    }
}

task('increaseVersionCode') << {

    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
    manifestFile.write(manifestContent)
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig') {
        task.dependsOn 'increaseVersionCode'
    }
}
